const express = require('express');
const router = express.Router();
// encrypt the password
const bcrypt = require ('bcryptjs');
const passport = require('passport');
const flash = require('connect-flash');
const session = require('express-session');

// User model to store data
const User = require('../models/User.js');
router.use(express.static(__dirname + './public'));
// Login Page
router.get('/login', (req, res,next) => res.render('login',{}));

// Register Page
router.get('/register', (req, res , next) => res.render('login',{}));
// res.render("login",{
// });
// Register Handle
router.post('/register', (req, res) =>{
    const{name, email, password, eid} = req.body;
    let errors = [];
    console.log('registration request made')
    // Check required fields
    if(!name || !email || !password || !eid){
        errors.push({msg: 'Please fill in all fields'});
    }
    // Check password length
    // if(password.length() < 6){
    //     errors.push({msg: 'Password should be at least 6 charachters'});
    // }
    // if(eid.length() < 6){
    //     errors.push({msg: 'Identification number should be at least 6 charachters'});
    //}
    if(!(email.split("@")[1] === "thapar.edu")){
        // not correct email id
        errors.push({msg: 'Email should be of type thapar.edu'});
    }
    console.log('registration checks done');
    if(errors.length > 0){
        res.render('register',{
            errors,
            name,
            email,
            password,
            eid
        });
    }else{
        // validation pass
        User.findOne({email: email})
        .then(user => {
            if(user){
                // User exist
                console.log('regit')
                errors.push({msg: 'Email is already registered'})
                res.render('register',{
                    errors,
                    name,
                    email,
                    password,
                    eid
                });

            }else{
                console.log("unique email it is for registration");
                const newUser = new User({
                    name,
                    email,
                    password,
                    eid
                });
                newUser.save().then(user =>{
                    req.flash('success_msg', 'You are now registered and can log in');
                    res.redirect('/users/login');
                    console.log("user registerd");
                    console.log(user);
                })
                .cath(err=> console.log(err));
                // encrypt password i.e Hash password
                // bcrypt.genSalt(10, (err, salt) => 
                // bcrypt.hash(newUser.password,salt,(err, hash)=>{
                //     if(err) throw err;
                //     // Set password to hash
                //     newUser.password = hash;
                //     // Save user
                //     newUser.save()
                //     .then(user =>{
                //         req.flash('success_msg', 'You are now registered and can log in');
                //         res.redirect('/users/login');
                //         console.log("user registeres");
                //     })
                //     .catch(err => console.log(err))
                // }))
            }
        });
    }
    console.log("user has successfully registered");
    //res.redirect('/users/login');
});

// Login Handle
router.post('/login', (req, res, next) => {
    passport.authenticate('local', {
        successRedirect: '/dashboard',
        failureRedirect: '/users/login',
        failureFlash: true
    })(req, res, next);
});

// Logout Handle
router.get('/logout', (req, res) =>{
    req.logout();
    req.flash('success_msg', 
    ('You have successfully logged out.'));
    res.redirect('/users/login');
})

module.exports = router;